###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet : "Object key key: 'value'"
${1:key}: ${2:'${3:value}'}${4:, }
endsnippet

snippet typedef "type definition" b
/* **************************************************************************
 * ${1/(?:\w+\.)*(.*)/$1/}.$2                                                         $3*/ /**
 *
 * The ${1/(?:\w+\.)*(.*)/$1/}.$2 is the object that [...description of type]
 *
 * @typedef {{
 *      ${4:property1_name}: (${5:string | undefined}),
 *      ${6:property2_name}: (${7:string | undefined})
 *
 * }} ${1:class_name}.${2:type_name}
 *
 * @property {$5} $4
 *      [description of $4]
 *
 * @property {$7} $6
 *      [description of $6]
 */
${VISUAL}$1.$2;

endsnippet

snippet filecmt "File comment" b
/* ******************************************************************************
 * `!v expand("%:t")`                                                               $1*
 * *************************************************************************/ /**
 *
 * @fileoverview [summary of file contents]
 *
 * [More detail about the file's contents]
 *
 * Created on       `date +"%B %-d, %Y"`
 * @author          Michael Jay Lippert
 *
 * @copyright (c) `date +"%Y"` Michael Jay Lippert,
 *            MIT License (see https://opensource.org/licenses/MIT)
 *
 * ******************************************************************************/

endsnippet

snippet classcmt "Class comment" b
/* ******************************************************************************
 * ${1/(?:\w+\.)*(.*)/$1/}                                                                     $2*/ /**
 *
 * [Description of the ${1/(?:\w+\.)*(.*)/$1/} class]
 *
 ********************************************************************************/
class ${1:class_name}
{
	/* **************************************************************************
	 * constructor                                                         */ /**
	 *
	 * ${1/(?:\w+\.)*(.*)/$1/} class constructor.
	 *
	 * @param \{!$1.Config=} config
	 *      The settings to configure this ${1/(?:\w+\.)*(.*)/$1/}
	 *
	 */
	constructor(config = {})
	{
		// instance properties
		$0
	}
}

/* ******************************************************************************
 * ${1/(?:\w+\.)*(.*)/$1/}.Config                                                              $3*/ /**
 *
 * The ${1/(?:\w+\.)*(.*)/$1/}.Config defines the object passed to the constructor that
 * contains options/values used to initialize an instance of a $1.
 *
 * @typedef {!Object} $1.Config
 *
 * @property {string | undefined} property1_name
 *      [description of property1_name]
 */

endsnippet

snippet methodcmt "class method with comment" b
/* **************************************************************************
 * $1                                                                    $3*/ /**
 *
 * [Description of $1]
 *
 * @param \{string} $2
 *      [Description of the $2 parameter]
 *
 * @returns {string}
 */
${1:method_name}(${2:param1})
{
	$0
}
endsnippet

snippet fncmt "function with comment" b
/* ******************************************************************************
 * $1                                                                        $3*/ /**
 *
 * [Description of $1]
 *
 * @param \{string} $2
 *      [Description of the $2 parameter]
 *
 * @returns {string}
 */
function ${1:fn_name}(${2:param1})
{
	$0
}
endsnippet

snippet varcmt "Comment header for a variable" b
/**
 * ${1:Description}
 * @type {${2:type}}
 */
endsnippet

snippet for "for (...) {...} (faster)"
for (let ${2:i} = ${1:Things}.length - 1; $2 >= 0; --$2)
{
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}"
for (let ${2:i} = 0; $2 < ${1:Things}.length; ++$2)
{
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument})
{
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition})
{
	${2://code}
}
else
{
	${3://code}
}
endsnippet

snippet if "if"
if (${1:condition})
{
	${VISUAL}$0
}
endsnippet

snippet try "try { ... } catch (e) { ... }"
try
{
	${0:${VISUAL}}
}
catch (${1:e})
{
	${2:/* handle error */}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"});
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

# Snippets for unit tests w/ mocha and chai

snippet it "it should"
it('should ${1:do_something}', function () {
${VISUAL}$0
});
endsnippet

snippet describe "describe"
describe('${1:description}', function () {
${VISUAL}$0
});
endsnippet

# vim:ft=snippets:
